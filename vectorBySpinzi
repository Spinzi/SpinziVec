#include <iostream>
#include <fstream>
#include <functional>
#include <ctime>
#include <iomanip>

#pragma warning(disable : 4996)

class OHManagerVector {
private:
	struct OHcustomArray {
		int* data;
		char* name;
		int length;

		void import(int* vectorData, int _length) {
			rebuild(_length);
			for (int i = 0; i < _length; i++)
				data[i] = vectorData[i];
		}

		void rename(const char* _name = "Unnamed") {
			if (name)
				delete[] name;
			name = new char[strlen(_name) + 1];
			strcpy(name, _name);
		}
		 
		void rebuild(int _length = 0) {
			int* newData = new int[_length];
			for (int i = 0; i < _length && i < length; i++)
				newData[i] = data[i];
			length = _length;
			delete[] data;
			data = newData;
		}

		void clear() {
			rename("Cleared unnamed");
			rebuild();
		}

		OHcustomArray(const char* _name = "Unnamed", int* _vector = nullptr, int _length = 0):length(_length) {
			name = new char[strlen(_name) + 1];
			strcpy(name, _name);
			data = new int[length];
			if (_vector)
				for (int i = 0; i < length; i++)
					data[i] = _vector[i];
		}

		~OHcustomArray() {
			delete[] data;
			delete[] name;
		}

		OHcustomArray(const OHcustomArray&) = delete;
		OHcustomArray& operator=(const OHcustomArray&) = delete;
	};
	void OHvectorCopy(OHcustomArray destination, OHcustomArray source) {
		
	}

	void swap(int& a, int& b) {
		int t = a;
		a = b;
		b = t;
		};

	int split(int from, int to, int* v, bool ascending) {
		int index = from - 1;

		for (int i = from; i < to; i++) {
			if (ascending ? (v[i] < v[to]) : (v[i] > v[to])) {
				swap(v[++index], v[i]);
			}
		}

		swap(v[++index], v[to]);
		return index;
		};


	void quickSort(int from, int to, int* v, bool ascending) {
		if (from < to) {
			int piv = split(from, to, v, ascending);

			quickSort(from, piv - 1, v, ascending);
			quickSort(piv + 1, to, v, ascending);
		}
		};

	OHcustomArray OHvector;
	
	bool logState = false;

public:

	OHManagerVector(bool _logState = 0):logState(_logState) {
		OHlog("___\n[OHManagedVector] Instance created. Initialization is optional.\n",
			"Note: Use responsibly. Direct source code modification is discouraged.\n___");
	}


	void init(const char* name, int* vectorData = nullptr, int length = 0) {
		OHvector.rename(name);
		OHlog("Renamed vector inside init.", "New name:", name);
		OHvector.import(vectorData, length);
		OHlog("Initialized vector succesfully.");
	}

	void read() {
		OHlog("Attempting to read vector. Elements needed:", "Vector length", "Vector elements");
		std::cin >> OHvector.length;
		OHvector.rebuild(OHvector.length);
		for (int i = 0; i < OHvector.length; i++)
		{
			std::cin >> OHvector.data[i];
		}
		OHlog("Finished reading the vecotr.");
	}

	void print(bool newLine = 0) {
		for (int i = 0; i < OHvector.length; i++) {
			std::cout << OHvector.data[i] << ' ';
		}
		if (newLine)
			std::cout << '\n';
		OHlog("Printed vector.");
	}

	void sort(int from = 0, int to = 0, bool ascending = 1) {
		if (to <= 0 || to > OHvector.length - 1) {
			to = OHvector.length - 1;
			OHlog("Modified 'to' term inside sort function due to out of bond memory attempt.");
		}
		if (from < 0 || from > to) {
			from = 0;
			OHlog("Modified 'from' term inside sort function due to out of bond memory attempt.");
		}

		quickSort(from, to, OHvector.data, ascending);
		OHlog("Sorting completed.", "Order:", ascending ? "Ascending" : "Descending");
	}

	void insert_at(int value, int position = -1) {
		if (position < 0 || position > OHvector.length)
			position = OHvector.length;

		OHvector.rebuild(OHvector.length + 1);

		for (int i = OHvector.length - 1; i > position; --i) {
			OHvector.data[i] = OHvector.data[i - 1];
		}

		OHvector.data[position] = value;

		char* position_ = toCharArray(position);
		char* value_ = toCharArray(value);
		OHlog("insert_at executed - Position and value:", position_, value_);
		delete[] position_;
		delete[] value_;
	}

	void pop_at(int position = -1, size_t length = 1) {
		if (OHvector.length == 0)
			return;
		if (position < 0 || position >= OHvector.length) {
			position = OHvector.length - 1;
		}
		if (length > OHvector.length - position) {
			length = OHvector.length - position;
		}

		for (int i = position; i < OHvector.length - length; i++) {
			OHvector.data[i] = OHvector.data[i + length];
		}

		OHvector.length -= length;
		OHvector.rebuild(OHvector.length);

		char* posStr = toCharArray(position);
		OHlog("pop_at executed", "Position:", posStr);
		delete[] posStr;
	}

	void OHlog(const char* msg = nullptr, const char* msg2 = nullptr, const char* msg3 = nullptr) {
		if (!logState)
			return;
		std::ofstream log("OHlog.txt", std::ios::app);
		std::time_t timestamp = time(0);
		tm* now = std::localtime(&timestamp);

		log << "\n__ __ __\n" << '[' << std::put_time(now, "%Y-%m-%d %H:%M:%S") << ']' << '\n'
			<< "Current vector: " << (OHvector.name ? OHvector.name : "Unnamed") << '\n'
			<< (msg ? msg : " - ") << " | " << (msg2 ? msg2 : " - ") << " | " << (msg3 ? msg3 : " - ")
			<< "\n__ __ __\n";
	}

	void OHsetLog(bool state) {
		logState = state;
		if (logState)
			OHlog("LogState has been set to on.", "[OHManagerVector]", "Note: Use responsibly. Direct source code modification is discouraged.");
	}

	void OHprintLogState() {
		std::cout << "Log state: " << logState << '\n';
	}

	int getIntLength(int a) {
		if (a == 0) return 1;
		a = abs(a);
		int length = 0;
		while (a) {
			a /= 10;
			length++;
		}
		return length;
	}

	char singleDigitIntToChar(int a) {
		return '0' + (a % 10);
	}

	char* toCharArray(int val) {
		OHlog("toCharArray", "Converting integer to char array",
			"WARNING: Result must be manually deleted by the user if used outside - otherwise it will automatically be deleted by class");

		int isNegative = val < 0;
		int absVal = abs(val);
		int length = getIntLength(val);
		int totalLength = length + isNegative + 1; // +1 for null terminator

		char* output = new char[totalLength];
		output[totalLength - 1] = '\0';

		if (isNegative)
			output[0] = '-';

		for (int i = totalLength - 2; i >= isNegative; i--) {
			output[i] = singleDigitIntToChar(absVal % 10);
			absVal /= 10;
		}

		OHlog("toCharArray", "Char array constructed successfully", nullptr);
		return output;
	}

	char* vectorToCharArray(int* data, int length) {
		int totalSize = 0;
		for (int i = 0; i < length; i++) {
			int digits = getIntLength(data[i]);
			if (data[i] < 0)digits++;
			totalSize += digits;
			if (i != length - 1) {
				totalSize += 2;//accounting for "; "
			}
		}
		totalSize += 1; //null terminator

		char* output = new char[totalSize];
		int pos = 0;
		for (int i = 0; i < length; i++) {
			char* num = toCharArray(data[i]);
			for (int j = 0; num[j]; j++) {//null terminated, will end at \0
				output[pos++] = num[j];//adding what is in num to the output
			}
			delete[] num;//we clean after ourselves
			if (i != length - 1) {//adding "; " after each iteration
				output[pos++] = ';';
				output[pos++] = ' ';
			}
		}
		output[pos] = '\0';
		return output;
	}

	void OHdebugVectorState() {
		char* lengthStr = toCharArray(OHvector.length);
		char* dataStr = vectorToCharArray(OHvector.data, OHvector.length);

		OHlog("Vector State Debug",
			(std::string("Length: ") + lengthStr).c_str(),
			(std::string("Data: ") + dataStr).c_str());

		delete[] lengthStr;
		delete[] dataStr;
	}
};

int main() {
	OHManagerVector e(true);
	e.read();
	e.sort();
	e.print();
	int postToAdd, value;
	std::cin >> postToAdd >> value;
	e.insert_at(value, postToAdd);
	e.print();
	e.OHdebugVectorState();
}
